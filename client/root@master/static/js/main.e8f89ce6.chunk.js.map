{"version":3,"sources":["Job.js","JobModal.js","Jobs.js","App.js","serviceWorker.js","index.js"],"names":["Job","job","onClick","Paper","className","Typography","variant","title","company","location","created_at","split","slice","join","Transition","React","forwardRef","props","ref","Slide","direction","JobModal","open","handleClose","Dialog","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","id","src","company_logo","DialogContent","DialogContentText","dangerouslySetInnerHTML","__html","description","DialogActions","Button","color","href","url","target","Jobs","jobs","numJobs","length","numPages","Math","ceil","useState","activeStep","setActiveStep","jobsOnPage","setOpen","selectedJob","selectJob","component","map","index","key","console","log","MobileStepper","steps","position","nextButton","size","prevActiveStep","disabled","backButton","fetchJobs","updateCb","a","async","fetch","res","json","App","jobList","updateJobs","useEffect","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e8f89ce6.chunk.js","sourcesContent":["import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nfunction Job({job, onClick}){\n    return(\n        <Paper onClick={onClick} className='job'>\n            <div>\n                <Typography variant=\"h5\">{job.title}</Typography>\n                <Typography variant=\"h6\">{job.company}</Typography>\n                <Typography variant=\"h5\">{job.location}</Typography>\n            </div>\n            <div>\n                <Typography>{job.created_at.split(' ').slice(0,3).join(' ')}</Typography>\n            </div>\n        </Paper>\n    )\n}\nexport default Job","\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n  });\nconst JobModal=({job, open, handleClose})=>{\n    if(!job.title){\n        return <div/>\n    }\n    return (\n        <div>\n      <Dialog\n        open={open}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-slide-title\"\n        aria-describedby=\"alert-dialog-slide-description\"\n      >\n        <DialogTitle id=\"alert-dialog-slide-title\">\n        {job.title} - \n        {job.company}\n        <img className=\"detail-logo\" src={job.company_logo}/>\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-slide-description\" dangerouslySetInnerHTML={{__html:job.description}}>\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Close\n          </Button>\n          <a href={job.url} target=\"blank\">\n            <Button onClick={handleClose} color=\"primary\">\n                Apply\n            </Button>\n        </a>\n        </DialogActions>\n      </Dialog>\n    </div>\n    )\n}\n\nexport default JobModal","import React, {useState} from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Job from './Job'\nimport MobileStepper from '@material-ui/core/MobileStepper';\nimport Button from '@material-ui/core/Button';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport JobModal from './JobModal'\n\n  \n\n\nfunction Jobs({jobs}){\n\n//Paginations    Logic\nconst numJobs = jobs.length\nconst numPages = Math.ceil(numJobs / 20);\nconst [activeStep, setActiveStep] = useState(0)\nconst handleNext = () => {\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n};\nconst handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n};\nconst jobsOnPage = jobs.slice(activeStep * 20, (activeStep * 20) + 20)\n\n// Modal Logic\nconst [open, setOpen] = React.useState(false);\nconst [selectedJob, selectJob] = React.useState({});\nconst handleClickOpen = (job) => {\n    setOpen(true);\n};\nconst handleClose = () => {\n    setOpen(false);\n};\n\n    return(\n        <div className=\"jobs\">\n            <JobModal open={open} job={selectedJob} handleClose={handleClose}/>\n            <div >\n            <Typography variant=\"h4\" component=\"h1\">\n                Entry level Software Jobs\n            </Typography>\n            <Typography variant=\"h6\" component=\"h2\">\n                Found {numJobs} Jobs\n            </Typography>\n            {jobsOnPage.map((job,index)=><Job job={job} key={`${job.id}_${index}`} onClick={() => {\n                        console.log('clicked')\n                        handleClickOpen();\n                        selectJob(job)\n                    }}/>)}\n            </div>\n            <div>Page {activeStep+1} of {numPages}</div>\n            <MobileStepper\n                    steps={numPages}\n                    position=\"static\"\n                    variant=\"progress\"\n                    activeStep={activeStep}\n                    nextButton={\n                    <Button size=\"small\" onClick={handleNext} disabled={activeStep === numPages - 1}>\n                        Next\n                        <KeyboardArrowRight /> \n                    </Button>\n                    }\n                    backButton={\n                    <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\n                        <KeyboardArrowLeft />\n                        Back\n                    </Button>\n                    }\n                />\n        </div>\n        \n        \n    )\n}\nexport default Jobs","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Jobs from './Jobs'\nconst JOB_API_URL = '/api/jobs'\nconst mockjobs=[\n  {title:'SE1', company:'Google'},\n  {title:'SE2', company:'Facebook'},\n  {title:'SE3', company:'Microsoft'}\n]\nconst fetchJobs = async(updateCb)=>{\n  const res = await fetch(JOB_API_URL)\n  const json = await res.json()\n  updateCb(json)\n  console.log({json})\n}\nfunction App() {\n  const [jobList, updateJobs] = useState([])\n  useEffect(()=>{\n    fetchJobs(updateJobs)\n  }, [])\n  return (\n    <div className=\"App\">\n      <Jobs jobs={jobList}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}